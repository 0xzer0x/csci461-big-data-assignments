# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MASeSJghWiGMD_LfJnGue3rjw2y3PAqI
"""

import pandas as pd
import numpy as np
from google.colab import files

# load cancer data into data frame
df = pd.read_excel('cancer_data.xlsx')

"""Data Cleaning"""

df = pd.read_excel('cancer_data.xlsx', sheet_name='cancer_data_means')
df.head()

# Check for missing or null values
df.info()

df.isna().sum()

# use means to fill in missing values (numerical data)

df['texture_mean'] = df['texture_mean'].fillna(df['texture_mean'].median())
df['smoothness_mean'] = df['smoothness_mean'].fillna(df['smoothness_mean'].median())
df['symmetry_mean'] = df['symmetry_mean'].fillna(df['symmetry_mean'].median())

df.isna().sum()

# fill in missing values using SimpleImputer (numerical data)

from sklearn.impute import SimpleImputer
df2 = pd.read_excel('cancer_data.xlsx', sheet_name='cancer_data_means')
print(df2.isna().sum())
print("=====================================================================")
print('DataFrame  after filling null values:')
imputer = SimpleImputer(strategy='mean')
df2.loc[:, df.select_dtypes(include=np.number).columns] = imputer.fit_transform(df2.select_dtypes(include=np.number))
print(df2.isna().sum())

# check for duplicates in the data
df.duplicated().sum()

# drop duplicates
df.drop_duplicates(inplace = True)

df.duplicated().sum()

"""Data Transformation"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

df

print(numeric_cols)

"""Data Reduction"""

df.drop('id', axis=1, inplace=True) # Drop Irrelevant Columns (ID)

df

"""Data Discretization"""

df['radius_category'] = pd.cut(df['radius_mean'], bins=3, labels=['Small', 'Medium', 'Large'])

df

df['texture_category'] = pd.cut(df['texture_mean'], bins=3, labels=['Small', 'Medium', 'Large'])

df

# Save the processed data to a new CSV file
df.to_csv("res_dpre.csv", index=False)

# Download the processed file
files.download("res_dpre.csv")